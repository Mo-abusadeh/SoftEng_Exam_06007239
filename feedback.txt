Classes	and Inheritance	: Not quite got the idea of OOP. This is most clearly demonstrated in Map.DisplayMap() where there are loops that know how each of the map objects are drawn, even though this knowledge should lie within the classes themselves: Drone, Keeper, Lion. Inheritance can be used to avoid repeating code in similar classes by putting the data and functionality that are common to those classes into a single superclass, and then the more specific classes can inherit that data and functionality. In this case, the data and functionality common to Drone, Keeper and Lion are: data:Name, position, GPSid, functionality:getting the GPS position from the id, and drawing on the map. You're going in the right direction, but can include name as a common field, and draw and getLocation() methods in the superclass as it is common to all map objects.
ie keeper_coord, keeper_locs, phone_numbers and keeper_names should be abstracted (hidden) within Keeper 7/10
Encapsulation : Good use of private modifiers and getters. 10/10
Polymorphism : Polymorphism can be used to draw all of the map objects, without having to know which specific object they are, by using subtype polymorphism. If Keeper, Lion, Drone inherit from a superclass, their object references can be added to an ArrayList of that superclass. If the superclass has an abstract method 'draw' which is overriden in the subclasses, then calling 'draw' on the superclass will call the specific 'draw' in the subclass. A loop can then iterate through the ArrayList calling 'draw' on each element, without having to know if they are Drone, Keeper or Lion. You've used this technique, but can instead treat Keeper, Lion, Drone as ParkMembers with a 'draw' method  7/10
Exceptions and Error handling : Exceptions in getCoords() are not handled 0/10
Organization : There is one package - there could be at least one more (eg for ParkMembers) 7/10
Attempt : Getting there, but hadn't completed the code - there are syntax errors. 7/10
Flexibility for Future : There are ArrayList used which make it flexible to add future map objects 9/10
Alerts : Implemented 10/10
